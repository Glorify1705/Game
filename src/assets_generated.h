// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ASSETS_ASSETS_H_
#define FLATBUFFERS_GENERATED_ASSETS_ASSETS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 21,
             "Non-compatible flatbuffers version included");

namespace assets {

struct Image;
struct ImageBuilder;

struct Subtexture;
struct SubtextureBuilder;

struct Spritesheet;
struct SpritesheetBuilder;

struct Script;
struct ScriptBuilder;

struct Sound;
struct SoundBuilder;

struct Assets;
struct AssetsBuilder;

enum class SoundType : uint8_t {
  OGG = 0,
  MIN = OGG,
  MAX = OGG
};

inline const SoundType (&EnumValuesSoundType())[1] {
  static const SoundType values[] = {
    SoundType::OGG
  };
  return values;
}

inline const char * const *EnumNamesSoundType() {
  static const char * const names[2] = {
    "OGG",
    nullptr
  };
  return names;
}

inline const char *EnumNameSoundType(SoundType e) {
  if (::flatbuffers::IsOutRange(e, SoundType::OGG, SoundType::OGG)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSoundType()[index];
}

struct Image FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ImageBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FILENAME = 4,
    VT_WIDTH = 6,
    VT_HEIGHT = 8,
    VT_COMPONENTS = 10,
    VT_CONTENTS = 12
  };
  const ::flatbuffers::String *filename() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FILENAME);
  }
  uint32_t width() const {
    return GetField<uint32_t>(VT_WIDTH, 0);
  }
  uint32_t height() const {
    return GetField<uint32_t>(VT_HEIGHT, 0);
  }
  uint32_t components() const {
    return GetField<uint32_t>(VT_COMPONENTS, 0);
  }
  const ::flatbuffers::Vector<uint8_t> *contents() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_CONTENTS);
  }
  template<size_t Index>
  auto get_field() const {
         if constexpr (Index == 0) return filename();
    else if constexpr (Index == 1) return width();
    else if constexpr (Index == 2) return height();
    else if constexpr (Index == 3) return components();
    else if constexpr (Index == 4) return contents();
    else static_assert(Index != Index, "Invalid Field Index");
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FILENAME) &&
           verifier.VerifyString(filename()) &&
           VerifyField<uint32_t>(verifier, VT_WIDTH, 4) &&
           VerifyField<uint32_t>(verifier, VT_HEIGHT, 4) &&
           VerifyField<uint32_t>(verifier, VT_COMPONENTS, 4) &&
           VerifyOffset(verifier, VT_CONTENTS) &&
           verifier.VerifyVector(contents()) &&
           verifier.EndTable();
  }
};

struct ImageBuilder {
  typedef Image Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_filename(::flatbuffers::Offset<::flatbuffers::String> filename) {
    fbb_.AddOffset(Image::VT_FILENAME, filename);
  }
  void add_width(uint32_t width) {
    fbb_.AddElement<uint32_t>(Image::VT_WIDTH, width, 0);
  }
  void add_height(uint32_t height) {
    fbb_.AddElement<uint32_t>(Image::VT_HEIGHT, height, 0);
  }
  void add_components(uint32_t components) {
    fbb_.AddElement<uint32_t>(Image::VT_COMPONENTS, components, 0);
  }
  void add_contents(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> contents) {
    fbb_.AddOffset(Image::VT_CONTENTS, contents);
  }
  explicit ImageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Image> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Image>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Image> CreateImage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> filename = 0,
    uint32_t width = 0,
    uint32_t height = 0,
    uint32_t components = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> contents = 0) {
  ImageBuilder builder_(_fbb);
  builder_.add_contents(contents);
  builder_.add_components(components);
  builder_.add_height(height);
  builder_.add_width(width);
  builder_.add_filename(filename);
  return builder_.Finish();
}

struct Image::Traits {
  using type = Image;
  static auto constexpr Create = CreateImage;
  static constexpr auto name = "Image";
  static constexpr auto fully_qualified_name = "assets.Image";
  static constexpr size_t fields_number = 5;
  static constexpr std::array<const char *, fields_number> field_names = {
    "filename",
    "width",
    "height",
    "components",
    "contents"
  };
  template<size_t Index>
  using FieldType = decltype(std::declval<type>().get_field<Index>());
};

inline ::flatbuffers::Offset<Image> CreateImageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *filename = nullptr,
    uint32_t width = 0,
    uint32_t height = 0,
    uint32_t components = 0,
    const std::vector<uint8_t> *contents = nullptr) {
  auto filename__ = filename ? _fbb.CreateString(filename) : 0;
  auto contents__ = contents ? _fbb.CreateVector<uint8_t>(*contents) : 0;
  return assets::CreateImage(
      _fbb,
      filename__,
      width,
      height,
      components,
      contents__);
}

struct Subtexture FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SubtextureBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_SPRITESHEET = 6,
    VT_X = 8,
    VT_Y = 10,
    VT_WIDTH = 12,
    VT_HEIGHT = 14
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *spritesheet() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SPRITESHEET);
  }
  uint32_t x() const {
    return GetField<uint32_t>(VT_X, 0);
  }
  uint32_t y() const {
    return GetField<uint32_t>(VT_Y, 0);
  }
  uint32_t width() const {
    return GetField<uint32_t>(VT_WIDTH, 0);
  }
  uint32_t height() const {
    return GetField<uint32_t>(VT_HEIGHT, 0);
  }
  template<size_t Index>
  auto get_field() const {
         if constexpr (Index == 0) return name();
    else if constexpr (Index == 1) return spritesheet();
    else if constexpr (Index == 2) return x();
    else if constexpr (Index == 3) return y();
    else if constexpr (Index == 4) return width();
    else if constexpr (Index == 5) return height();
    else static_assert(Index != Index, "Invalid Field Index");
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_SPRITESHEET) &&
           verifier.VerifyString(spritesheet()) &&
           VerifyField<uint32_t>(verifier, VT_X, 4) &&
           VerifyField<uint32_t>(verifier, VT_Y, 4) &&
           VerifyField<uint32_t>(verifier, VT_WIDTH, 4) &&
           VerifyField<uint32_t>(verifier, VT_HEIGHT, 4) &&
           verifier.EndTable();
  }
};

struct SubtextureBuilder {
  typedef Subtexture Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Subtexture::VT_NAME, name);
  }
  void add_spritesheet(::flatbuffers::Offset<::flatbuffers::String> spritesheet) {
    fbb_.AddOffset(Subtexture::VT_SPRITESHEET, spritesheet);
  }
  void add_x(uint32_t x) {
    fbb_.AddElement<uint32_t>(Subtexture::VT_X, x, 0);
  }
  void add_y(uint32_t y) {
    fbb_.AddElement<uint32_t>(Subtexture::VT_Y, y, 0);
  }
  void add_width(uint32_t width) {
    fbb_.AddElement<uint32_t>(Subtexture::VT_WIDTH, width, 0);
  }
  void add_height(uint32_t height) {
    fbb_.AddElement<uint32_t>(Subtexture::VT_HEIGHT, height, 0);
  }
  explicit SubtextureBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Subtexture> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Subtexture>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Subtexture> CreateSubtexture(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> spritesheet = 0,
    uint32_t x = 0,
    uint32_t y = 0,
    uint32_t width = 0,
    uint32_t height = 0) {
  SubtextureBuilder builder_(_fbb);
  builder_.add_height(height);
  builder_.add_width(width);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_spritesheet(spritesheet);
  builder_.add_name(name);
  return builder_.Finish();
}

struct Subtexture::Traits {
  using type = Subtexture;
  static auto constexpr Create = CreateSubtexture;
  static constexpr auto name = "Subtexture";
  static constexpr auto fully_qualified_name = "assets.Subtexture";
  static constexpr size_t fields_number = 6;
  static constexpr std::array<const char *, fields_number> field_names = {
    "name",
    "spritesheet",
    "x",
    "y",
    "width",
    "height"
  };
  template<size_t Index>
  using FieldType = decltype(std::declval<type>().get_field<Index>());
};

inline ::flatbuffers::Offset<Subtexture> CreateSubtextureDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *spritesheet = nullptr,
    uint32_t x = 0,
    uint32_t y = 0,
    uint32_t width = 0,
    uint32_t height = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto spritesheet__ = spritesheet ? _fbb.CreateString(spritesheet) : 0;
  return assets::CreateSubtexture(
      _fbb,
      name__,
      spritesheet__,
      x,
      y,
      width,
      height);
}

struct Spritesheet FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SpritesheetBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FILENAME = 4,
    VT_IMAGE_NAME = 6,
    VT_SUB_TEXTURE = 8
  };
  const ::flatbuffers::String *filename() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FILENAME);
  }
  const ::flatbuffers::String *image_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IMAGE_NAME);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<assets::Subtexture>> *sub_texture() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<assets::Subtexture>> *>(VT_SUB_TEXTURE);
  }
  template<size_t Index>
  auto get_field() const {
         if constexpr (Index == 0) return filename();
    else if constexpr (Index == 1) return image_name();
    else if constexpr (Index == 2) return sub_texture();
    else static_assert(Index != Index, "Invalid Field Index");
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FILENAME) &&
           verifier.VerifyString(filename()) &&
           VerifyOffset(verifier, VT_IMAGE_NAME) &&
           verifier.VerifyString(image_name()) &&
           VerifyOffset(verifier, VT_SUB_TEXTURE) &&
           verifier.VerifyVector(sub_texture()) &&
           verifier.VerifyVectorOfTables(sub_texture()) &&
           verifier.EndTable();
  }
};

struct SpritesheetBuilder {
  typedef Spritesheet Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_filename(::flatbuffers::Offset<::flatbuffers::String> filename) {
    fbb_.AddOffset(Spritesheet::VT_FILENAME, filename);
  }
  void add_image_name(::flatbuffers::Offset<::flatbuffers::String> image_name) {
    fbb_.AddOffset(Spritesheet::VT_IMAGE_NAME, image_name);
  }
  void add_sub_texture(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<assets::Subtexture>>> sub_texture) {
    fbb_.AddOffset(Spritesheet::VT_SUB_TEXTURE, sub_texture);
  }
  explicit SpritesheetBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Spritesheet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Spritesheet>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Spritesheet> CreateSpritesheet(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> filename = 0,
    ::flatbuffers::Offset<::flatbuffers::String> image_name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<assets::Subtexture>>> sub_texture = 0) {
  SpritesheetBuilder builder_(_fbb);
  builder_.add_sub_texture(sub_texture);
  builder_.add_image_name(image_name);
  builder_.add_filename(filename);
  return builder_.Finish();
}

struct Spritesheet::Traits {
  using type = Spritesheet;
  static auto constexpr Create = CreateSpritesheet;
  static constexpr auto name = "Spritesheet";
  static constexpr auto fully_qualified_name = "assets.Spritesheet";
  static constexpr size_t fields_number = 3;
  static constexpr std::array<const char *, fields_number> field_names = {
    "filename",
    "image_name",
    "sub_texture"
  };
  template<size_t Index>
  using FieldType = decltype(std::declval<type>().get_field<Index>());
};

inline ::flatbuffers::Offset<Spritesheet> CreateSpritesheetDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *filename = nullptr,
    const char *image_name = nullptr,
    const std::vector<::flatbuffers::Offset<assets::Subtexture>> *sub_texture = nullptr) {
  auto filename__ = filename ? _fbb.CreateString(filename) : 0;
  auto image_name__ = image_name ? _fbb.CreateString(image_name) : 0;
  auto sub_texture__ = sub_texture ? _fbb.CreateVector<::flatbuffers::Offset<assets::Subtexture>>(*sub_texture) : 0;
  return assets::CreateSpritesheet(
      _fbb,
      filename__,
      image_name__,
      sub_texture__);
}

struct Script FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ScriptBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FILENAME = 4,
    VT_CONTENTS = 6
  };
  const ::flatbuffers::String *filename() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FILENAME);
  }
  const ::flatbuffers::Vector<uint8_t> *contents() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_CONTENTS);
  }
  template<size_t Index>
  auto get_field() const {
         if constexpr (Index == 0) return filename();
    else if constexpr (Index == 1) return contents();
    else static_assert(Index != Index, "Invalid Field Index");
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FILENAME) &&
           verifier.VerifyString(filename()) &&
           VerifyOffset(verifier, VT_CONTENTS) &&
           verifier.VerifyVector(contents()) &&
           verifier.EndTable();
  }
};

struct ScriptBuilder {
  typedef Script Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_filename(::flatbuffers::Offset<::flatbuffers::String> filename) {
    fbb_.AddOffset(Script::VT_FILENAME, filename);
  }
  void add_contents(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> contents) {
    fbb_.AddOffset(Script::VT_CONTENTS, contents);
  }
  explicit ScriptBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Script> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Script>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Script> CreateScript(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> filename = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> contents = 0) {
  ScriptBuilder builder_(_fbb);
  builder_.add_contents(contents);
  builder_.add_filename(filename);
  return builder_.Finish();
}

struct Script::Traits {
  using type = Script;
  static auto constexpr Create = CreateScript;
  static constexpr auto name = "Script";
  static constexpr auto fully_qualified_name = "assets.Script";
  static constexpr size_t fields_number = 2;
  static constexpr std::array<const char *, fields_number> field_names = {
    "filename",
    "contents"
  };
  template<size_t Index>
  using FieldType = decltype(std::declval<type>().get_field<Index>());
};

inline ::flatbuffers::Offset<Script> CreateScriptDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *filename = nullptr,
    const std::vector<uint8_t> *contents = nullptr) {
  auto filename__ = filename ? _fbb.CreateString(filename) : 0;
  auto contents__ = contents ? _fbb.CreateVector<uint8_t>(*contents) : 0;
  return assets::CreateScript(
      _fbb,
      filename__,
      contents__);
}

struct Sound FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SoundBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FILENAME = 4,
    VT_TYPE = 6,
    VT_CONTENTS = 8
  };
  const ::flatbuffers::String *filename() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FILENAME);
  }
  assets::SoundType type() const {
    return static_cast<assets::SoundType>(GetField<uint8_t>(VT_TYPE, 0));
  }
  const ::flatbuffers::Vector<uint8_t> *contents() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_CONTENTS);
  }
  template<size_t Index>
  auto get_field() const {
         if constexpr (Index == 0) return filename();
    else if constexpr (Index == 1) return type();
    else if constexpr (Index == 2) return contents();
    else static_assert(Index != Index, "Invalid Field Index");
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FILENAME) &&
           verifier.VerifyString(filename()) &&
           VerifyField<uint8_t>(verifier, VT_TYPE, 1) &&
           VerifyOffset(verifier, VT_CONTENTS) &&
           verifier.VerifyVector(contents()) &&
           verifier.EndTable();
  }
};

struct SoundBuilder {
  typedef Sound Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_filename(::flatbuffers::Offset<::flatbuffers::String> filename) {
    fbb_.AddOffset(Sound::VT_FILENAME, filename);
  }
  void add_type(assets::SoundType type) {
    fbb_.AddElement<uint8_t>(Sound::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_contents(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> contents) {
    fbb_.AddOffset(Sound::VT_CONTENTS, contents);
  }
  explicit SoundBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Sound> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Sound>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Sound> CreateSound(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> filename = 0,
    assets::SoundType type = assets::SoundType::OGG,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> contents = 0) {
  SoundBuilder builder_(_fbb);
  builder_.add_contents(contents);
  builder_.add_filename(filename);
  builder_.add_type(type);
  return builder_.Finish();
}

struct Sound::Traits {
  using type = Sound;
  static auto constexpr Create = CreateSound;
  static constexpr auto name = "Sound";
  static constexpr auto fully_qualified_name = "assets.Sound";
  static constexpr size_t fields_number = 3;
  static constexpr std::array<const char *, fields_number> field_names = {
    "filename",
    "type",
    "contents"
  };
  template<size_t Index>
  using FieldType = decltype(std::declval<type>().get_field<Index>());
};

inline ::flatbuffers::Offset<Sound> CreateSoundDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *filename = nullptr,
    assets::SoundType type = assets::SoundType::OGG,
    const std::vector<uint8_t> *contents = nullptr) {
  auto filename__ = filename ? _fbb.CreateString(filename) : 0;
  auto contents__ = contents ? _fbb.CreateVector<uint8_t>(*contents) : 0;
  return assets::CreateSound(
      _fbb,
      filename__,
      type,
      contents__);
}

struct Assets FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AssetsBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IMAGES = 4,
    VT_SPRITE_SHEETS = 6,
    VT_SCRIPTS = 8,
    VT_SOUNDS = 10
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<assets::Image>> *images() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<assets::Image>> *>(VT_IMAGES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<assets::Spritesheet>> *sprite_sheets() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<assets::Spritesheet>> *>(VT_SPRITE_SHEETS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<assets::Script>> *scripts() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<assets::Script>> *>(VT_SCRIPTS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<assets::Sound>> *sounds() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<assets::Sound>> *>(VT_SOUNDS);
  }
  template<size_t Index>
  auto get_field() const {
         if constexpr (Index == 0) return images();
    else if constexpr (Index == 1) return sprite_sheets();
    else if constexpr (Index == 2) return scripts();
    else if constexpr (Index == 3) return sounds();
    else static_assert(Index != Index, "Invalid Field Index");
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_IMAGES) &&
           verifier.VerifyVector(images()) &&
           verifier.VerifyVectorOfTables(images()) &&
           VerifyOffset(verifier, VT_SPRITE_SHEETS) &&
           verifier.VerifyVector(sprite_sheets()) &&
           verifier.VerifyVectorOfTables(sprite_sheets()) &&
           VerifyOffset(verifier, VT_SCRIPTS) &&
           verifier.VerifyVector(scripts()) &&
           verifier.VerifyVectorOfTables(scripts()) &&
           VerifyOffset(verifier, VT_SOUNDS) &&
           verifier.VerifyVector(sounds()) &&
           verifier.VerifyVectorOfTables(sounds()) &&
           verifier.EndTable();
  }
};

struct AssetsBuilder {
  typedef Assets Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_images(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<assets::Image>>> images) {
    fbb_.AddOffset(Assets::VT_IMAGES, images);
  }
  void add_sprite_sheets(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<assets::Spritesheet>>> sprite_sheets) {
    fbb_.AddOffset(Assets::VT_SPRITE_SHEETS, sprite_sheets);
  }
  void add_scripts(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<assets::Script>>> scripts) {
    fbb_.AddOffset(Assets::VT_SCRIPTS, scripts);
  }
  void add_sounds(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<assets::Sound>>> sounds) {
    fbb_.AddOffset(Assets::VT_SOUNDS, sounds);
  }
  explicit AssetsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Assets> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Assets>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Assets> CreateAssets(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<assets::Image>>> images = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<assets::Spritesheet>>> sprite_sheets = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<assets::Script>>> scripts = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<assets::Sound>>> sounds = 0) {
  AssetsBuilder builder_(_fbb);
  builder_.add_sounds(sounds);
  builder_.add_scripts(scripts);
  builder_.add_sprite_sheets(sprite_sheets);
  builder_.add_images(images);
  return builder_.Finish();
}

struct Assets::Traits {
  using type = Assets;
  static auto constexpr Create = CreateAssets;
  static constexpr auto name = "Assets";
  static constexpr auto fully_qualified_name = "assets.Assets";
  static constexpr size_t fields_number = 4;
  static constexpr std::array<const char *, fields_number> field_names = {
    "images",
    "sprite_sheets",
    "scripts",
    "sounds"
  };
  template<size_t Index>
  using FieldType = decltype(std::declval<type>().get_field<Index>());
};

inline ::flatbuffers::Offset<Assets> CreateAssetsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<assets::Image>> *images = nullptr,
    const std::vector<::flatbuffers::Offset<assets::Spritesheet>> *sprite_sheets = nullptr,
    const std::vector<::flatbuffers::Offset<assets::Script>> *scripts = nullptr,
    const std::vector<::flatbuffers::Offset<assets::Sound>> *sounds = nullptr) {
  auto images__ = images ? _fbb.CreateVector<::flatbuffers::Offset<assets::Image>>(*images) : 0;
  auto sprite_sheets__ = sprite_sheets ? _fbb.CreateVector<::flatbuffers::Offset<assets::Spritesheet>>(*sprite_sheets) : 0;
  auto scripts__ = scripts ? _fbb.CreateVector<::flatbuffers::Offset<assets::Script>>(*scripts) : 0;
  auto sounds__ = sounds ? _fbb.CreateVector<::flatbuffers::Offset<assets::Sound>>(*sounds) : 0;
  return assets::CreateAssets(
      _fbb,
      images__,
      sprite_sheets__,
      scripts__,
      sounds__);
}

inline const assets::Assets *GetAssets(const void *buf) {
  return ::flatbuffers::GetRoot<assets::Assets>(buf);
}

inline const assets::Assets *GetSizePrefixedAssets(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<assets::Assets>(buf);
}

inline bool VerifyAssetsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<assets::Assets>(nullptr);
}

inline bool VerifySizePrefixedAssetsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<assets::Assets>(nullptr);
}

inline void FinishAssetsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<assets::Assets> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAssetsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<assets::Assets> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace assets

#endif  // FLATBUFFERS_GENERATED_ASSETS_ASSETS_H_
